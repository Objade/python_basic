#고급포맷팅 : "{}로 준비한 공간".format(공간수량에 맞는 값 수량)
#1. 기본사용은 일반포맷팅과 동등함
#-> 공간의 수량만큼 값의 수량을 요구함

print("{}".format(1,2))
print("{}{}".format(1,2))
print("{}{}{}".format(1,2,3))

#print("{}{}{}".format(1,2)) -> 값의 수량이 모자라면 에러가 남

#2. 중복처리 + 순서조작을 위해서 자주 사용됨
print("{} {} {}".format("A","AB","ABC")) #기본은 배치순서대로 출력

#1) 중복처리 : 번호는 0번부터 부여함
print("{0} {1} {0}".format("A","AB","ABC"))
print("{2} {0} {2}".format("A","AB","ABC"))

#2) 순서조작 : 번호는 0번부터 부여함
print("{2} {1} {0}".format("A","AB","ABC"))
print("{2} {0} {1}".format("A","AB","ABC"))

#->format() 괄호안에 배치된 값의 순서를 건드리지 않아도, 값의 출력순서 등을 바꿀 수 있음

#3. 중복처리를 위해서, 이름을 붙이는 방식으로도 처리할 수 있음
#   -> 부여한 이름의 위치, 수량에 따라서 중복처리, 순서조작이 가능함
#   -> 가독성을 높여서 알아보기 쉽게 할 때 사용
#   -> 괄호 안에 넣은 값들을 뭉쳐서 전달했을 때, 이를 연동되어 작동시키기 위해서 사용
print("{value1} {value2} {value3}".format(value1=100, value2=200, value3="ABC"))
