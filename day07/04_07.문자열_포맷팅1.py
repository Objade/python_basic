fnum1=3.14
fnum2=1.77
value=str(fnum1*fnum2)
i=value.index(".")
print(value[:i+3])

#슬라이싱의 단점 :
#1. 절차가 너무 번거로움
#2. 오차가 큼 (모양만 건드릴 뿐, 정교하지 않음)

#해결방법 : 포맷팅을 이용함 -> 이런 귀찮은 절차를 전부 알아서 해줌



#일반 포맷팅 : 서식문자를 이용한다.

# %c : 문자를 출력하기 위한 서식문자

#하나만 있는 문자열값을 출력할 수 있음.  어떤 문자가 되었든 2개 이상은 불가능.
#그 외에 정수값을 문자값을 바꿔서 보여줄 수 있다.
#참고. 정수값 65~90 : A~Z / 97~122 : a~z 로 매칭되어 있음
value="A"

#일반 포맷팅 사용요령 : "%서식문자"%(값)
#포맷팅을 하면, 값만 고치면 됨

form="문자값이 아래에 출력됩니다. \n->%c<-"
print(form%(value))
print(form%("B"))
print(form%("C"))

#포맷팅을 안쓰면, 코드를 고쳐야 함

form1="문자값 :"
print(form1, value)
print(form1, "B")
print(form1, "C")


# %d : '정수' 출력 + 형변환 기능
#숫자만 가능.  정수로 형변환 처리해서 출력해줌
#단, 문자는 불가능함.

print("정수값 %d 와 %d 와 %d 입니다."%(100, 3.14, 99.99))

# %f : 실수 출력 + 형변환 기능
#숫자만 가능. 실수값에 대해 간단하게 반올림 처리 + 소수점 조절하기 위해 사용

value=3.456
print(value)

#숫자 연산을 기반으로 한 반올림 처리
print(round(value, 2))
print(round(value, 1))
print(round(value, 0))

#슬라이싱을 기반으로 한 반올림 처리
print("%f"%(value))  #기본 6자리
print("%.2f"%(value)) # 2자리까지
print("%.1f"%(value)) # 1자리까지
print("%.0f"%(value)) # 0자리까지

# %s : 문자열용이긴 한데, 문자열로 형변환처리를 해줌 
#      모든 값들을 출력할 수 있고, 간단한 슬라이싱도 가능함
#      가장 범용성이 좋음

print("%s"%(value))
print("%.1s"%(value)) #선두부터 첫번째까지 슬라이싱
print("%.2s"%(value)) #선두부터 두번째까지 슬라이싱
print("%.3s"%(value)) #선두부터 세번째까지 슬라이싱

# (파이썬에서는) 실사용시 %s, %f 두가지로 끝남 

print("%s %s %s %s"%(100, "A", "ABC", 3.14))
#-> %c, %d를 굳이 쓸 필요는 없음

print("%.2f %.1f. %.0f"%(3.14, 3.14, 3.14))
#-> 실수값 조절을 위해서 %f를 사용하게 됨

#단, 다른 언어도 고려할 경우에는 되도록 정확하게 구분해서 사용해야 함
